<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts / Meta-boxes on Piklist Documentation</title>
    <link>https://piklist.github.io/Piklist-Documentation/tutorials/meta-boxes/</link>
    <description>Recent content in Posts / Meta-boxes on Piklist Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://piklist.github.io/Piklist-Documentation/tutorials/meta-boxes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting Started with Meta-boxes and Fields</title>
      <link>https://piklist.github.io/Piklist-Documentation/tutorials/meta-boxes/getting-started-creating-metaboxes-and-fields/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/tutorials/meta-boxes/getting-started-creating-metaboxes-and-fields/</guid>
      <description>Description Piklist makes it radically easy to add meta-boxes and fields to your posts, pages or custom post types. In this tutorial, we will create a metabox that includes three fields, select, text and ColorPicker, for standard posts.
  New to Piklist?    Before you start this tutorial:  Install Piklist like you would any other WordPress plugin. Decide if you are going to add the code in this tutorial to your custom plugin or your theme.</description>
    </item>
    
    <item>
      <title>Add Subtitle field to the Post screen</title>
      <link>https://piklist.github.io/Piklist-Documentation/tutorials/meta-boxes/add-subtitle-field/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/tutorials/meta-boxes/add-subtitle-field/</guid>
      <description>New to Piklist?    Before you start this tutorial:  Install Piklist like you would any other WordPress plugin. Decide if you are going to add the code in this tutorial to your custom plugin or your theme. This will define how to setup your Piklist folder structure. If you&#39;re new to Piklist, you may want to review the &#34;Getting Started&#34; tutorial first. It gives you a good overview of how Piklist works.</description>
    </item>
    
    <item>
      <title>Add WYSISYG to your Excerpt Box</title>
      <link>https://piklist.github.io/Piklist-Documentation/tutorials/meta-boxes/add-wysisyg-excerpt-box/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/tutorials/meta-boxes/add-wysisyg-excerpt-box/</guid>
      <description>Description To add some style to your excerpts, you can easily add a WYSIWYG editor to your excerpt box.
First, remove the default excerpt box Custom post type If you’re registering your own post type, include the supports parameter but don’t include excerpt in the array. This will tell WordPress not to render the excerpt box.
Built in post type Use the standard WordPress function remove_post_type_support, to remove the editor. For example, to remove the editor from Posts, place this in your theme’s functions.</description>
    </item>
    
    <item>
      <title>Creating Custom Post Statuses</title>
      <link>https://piklist.github.io/Piklist-Documentation/tutorials/meta-boxes/creating-custom-post-statuses/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/tutorials/meta-boxes/creating-custom-post-statuses/</guid>
      <description>Custom Post Statuses are at the heart of any web application built with WordPress, and Piklist makes it easy for you to implement them. No longer are you stuck with draft, pending review and published. You can add whatever post statuses you choose.
A few important caveats:
 Due to the nature of WordPress, your first post status has to remain “draft”. You can change the label so it displays “New”, or “Howdy”, but the key in the post status array will have to remain draft (we’ll explain more later in the tutorial).</description>
    </item>
    
    <item>
      <title>Hide Meta Boxes for a Page Template</title>
      <link>https://piklist.github.io/Piklist-Documentation/tutorials/meta-boxes/hide-meta-boxes-page-template/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/tutorials/meta-boxes/hide-meta-boxes-page-template/</guid>
      <description>Using Piklist, you can easily hide some meta boxes when a certain page template is selected in WordPress. This tutorial will show you how using two Piklist filters: piklist_get_file_data and piklist_add_part.
All of the code in this tutorial will go in your theme’s functions.php file, or your main plugin file.
Add a custom parameter to the Piklist comment block. Pikist uses a number of parameters in the comment block to control access to a meta box.</description>
    </item>
    
    <item>
      <title>Lock Field Values based on Post Status</title>
      <link>https://piklist.github.io/Piklist-Documentation/tutorials/meta-boxes/lock-field-values-based-post-status/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/tutorials/meta-boxes/lock-field-values-based-post-status/</guid>
      <description>Description Piklist allows you to lock a field value (making it read-only), when the post status changes. A perfect example of this is if you want to lock post meta once a post is published.
  New to Piklist?    Before you start this tutorial:  Install Piklist like you would any other WordPress plugin. Decide if you are going to add the code in this tutorial to your custom plugin or your theme.</description>
    </item>
    
    <item>
      <title>Registering Post Types</title>
      <link>https://piklist.github.io/Piklist-Documentation/tutorials/meta-boxes/registering-post-types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/tutorials/meta-boxes/registering-post-types/</guid>
      <description>Piklist works well with existing Post Types… those created with the standard WordPress function register_post_type. However, you can add some extra power to your Post Types by registering them the Piklist way. Piklist extends the register_post_type function with extra parameters to enable extra features. You can use the standard register_post_type() parameters, plus the additional Piklist Custom Post Type parameters.
To learn more about registering Post Types with Piklist, please read about the piklist_post_types filter.</description>
    </item>
    
    <item>
      <title>Show Metaboxes and Fields by Post Status</title>
      <link>https://piklist.github.io/Piklist-Documentation/tutorials/meta-boxes/show-metaboxes-fields-post-status/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/tutorials/meta-boxes/show-metaboxes-fields-post-status/</guid>
      <description>With web applications and powerful websites, there will be times you want to only show a meta-box or metafield when a post is in a particular post status. This becomes extra powerful when paired with the Piklist capability parameter, which allows you to show/hide a field based on a user role or capability. For an Order Management system, you may want an order notes field hidden until the estimate becomes an order.</description>
    </item>
    
  </channel>
</rss>
