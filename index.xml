<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Piklist Documentation</title>
    <link>https://piklist.github.io/docs/</link>
    <description>Recent content on Piklist Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://piklist.github.io/docs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Building a simple Admin Page</title>
      <link>https://piklist.github.io/docs/tutorials/admin-pages/creating-a-simple-admin-page/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/tutorials/admin-pages/creating-a-simple-admin-page/</guid>
      <description>Description Piklist makes it super easy to create admin pages in WordPress.
  New to Piklist?    Before you start this tutorial:  Install Piklist like you would any other WordPress plugin. Decide if you are going to add the code in this tutorial to your custom plugin or your theme. This will define how to setup your Piklist folder structure. If you&#39;re new to Piklist, you may want to review the &#34;</description>
    </item>
    
    <item>
      <title>Building your first Admin Notice</title>
      <link>https://piklist.github.io/docs/tutorials/admin-notices/building-an-admin-notice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/tutorials/admin-notices/building-an-admin-notice/</guid>
      <description>Description Piklist makes it super easy to create admin notices in WordPress, usually with no PHP.
  New to Piklist?    Before you start this tutorial:  Install Piklist like you would any other WordPress plugin. Decide if you are going to add the code in this tutorial to your custom plugin or your theme. This will define how to setup your Piklist folder structure. If you&#39;re new to Piklist, you may want to review the &#34;</description>
    </item>
    
    <item>
      <title>Building Your First Workflow</title>
      <link>https://piklist.github.io/docs/tutorials/workflows/building-first-workflow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/tutorials/workflows/building-first-workflow/</guid>
      <description>Piklist Workflows allow you to add a tabbed system on almost any admin page. Additionally, you can add almost anything you want to each tab.
  New to Piklist?    Before you start this tutorial:  Install Piklist like you would any other WordPress plugin. Decide if you are going to add the code in this tutorial to your custom plugin or your theme. This will define how to setup your Piklist folder structure.</description>
    </item>
    
    <item>
      <title>Create a Dashboard Widget to show an RSS Feed.</title>
      <link>https://piklist.github.io/docs/tutorials/dashboard-widgets/creating-a-dashboard-widget-to-show-rss-feed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/tutorials/dashboard-widgets/creating-a-dashboard-widget-to-show-rss-feed/</guid>
      <description>Description Piklist makes it super easy to create Dashboard Widgets in WordPress. This way you can concentrate on your widget code, and let Piklist do the hard part.
  New to Piklist?    Before you start this tutorial:  Install Piklist like you would any other WordPress plugin. Decide if you are going to add the code in this tutorial to your custom plugin or your theme. This will define how to setup your Piklist folder structure.</description>
    </item>
    
    <item>
      <title>Easy Widgets</title>
      <link>https://piklist.github.io/docs/tutorials/widgets/easy-widgets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/tutorials/widgets/easy-widgets/</guid>
      <description>Building widgets with Piklist is incredibly simple. You can use a fraction of the code WordPress requires to make very powerful widgets. In this tutorial, we will create a widget that includes three fields: select, text and ColorPicker.
  New to Piklist?    Before you start this tutorial:  Install Piklist like you would any other WordPress plugin. Decide if you are going to add the code in this tutorial to your custom plugin or your theme.</description>
    </item>
    
    <item>
      <title>Getting Started with Meta-boxes and Fields</title>
      <link>https://piklist.github.io/docs/tutorials/meta-boxes/getting-started-creating-metaboxes-and-fields/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/tutorials/meta-boxes/getting-started-creating-metaboxes-and-fields/</guid>
      <description>Description Piklist makes it radically easy to add meta-boxes and fields to your posts, pages or custom post types. In this tutorial, we will create a metabox that includes three fields, select, text and ColorPicker, for standard posts.
  New to Piklist?    Before you start this tutorial:  Install Piklist like you would any other WordPress plugin. Decide if you are going to add the code in this tutorial to your custom plugin or your theme.</description>
    </item>
    
    <item>
      <title>Getting Started with Taxonomies and Piklist</title>
      <link>https://piklist.github.io/docs/tutorials/taxonomies-terms/getting-started-taxonomies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/tutorials/taxonomies-terms/getting-started-taxonomies/</guid>
      <description>Whether you register a taxonomy via the standard WordPress function register_taxonomy, or through Piklist, you can still take advantage of many Piklist features. However, you can add some extra power to your Taxonomies by registering them the Piklist way. Piklist extends the register_taxonomy function with extra parameters to enable extra features. You can use the standard register_taxonomy parameters, plus additional ones defined by Piklist.
To register a Taxonomy with Piklist:</description>
    </item>
    
    <item>
      <title>Getting started with updates</title>
      <link>https://piklist.github.io/docs/tutorials/updates/getting-started-with-updates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/tutorials/updates/getting-started-with-updates/</guid>
      <description>If your plugin needs an update procedure, Piklist makes it quite easy. First create a php file, and drop it in the updates folder. The file name should be the current version of your plugin. So, if the update procedure is for version 2.0 of your plugin, then the file name should be 2.0.php.
  New to Piklist?    Before you start this tutorial:  Install Piklist like you would any other WordPress plugin.</description>
    </item>
    
    <item>
      <title>What is Piklist</title>
      <link>https://piklist.github.io/docs/faq/what-is-piklist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/faq/what-is-piklist/</guid>
      <description>What is Piklist? Piklist is an incredibly powerful framework for WordPress. When using Piklist to enhance your WordPress themes or plugins, you will be able to build more powerful, flexible websites with less code. Just install Piklist as you would a normal WordPress plugin, and then start writing code in your theme or plugin. This website should help you get started and provide a quick reference.
Most people use Piklist to add fields in the WordPress admin area, but you can do a lot more with Piklist.</description>
    </item>
    
    <item>
      <title>Adding SubTabs to Workflows</title>
      <link>https://piklist.github.io/docs/tutorials/workflows/adding-subtabs-to-workflows/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/tutorials/workflows/adding-subtabs-to-workflows/</guid>
      <description>Piklist Workflow tabs can be enhanced with unlimited subtabs, allowing you to create more complex, but easy to manage, user interfaces.
  New to Piklist?    Before you start this tutorial:  Install Piklist like you would any other WordPress plugin. Decide if you are going to add the code in this tutorial to your custom plugin or your theme. This will define how to setup your Piklist folder structure.</description>
    </item>
    
    <item>
      <title>How do I include Piklist in my plugin or theme?</title>
      <link>https://piklist.github.io/docs/faq/how-to-include-piklist-in-plugin-or-theme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/faq/how-to-include-piklist-in-plugin-or-theme/</guid>
      <description>While we understand why you may want to include Piklist in your plugin or theme, we believe it may negatively impact your users’ experience. Piklist is not a boilerplate framework and is always designed to be a standalone plugin. Piklist will not work properly if included in another plugin or theme.
If the user does install Piklist as a separate plugin, AND your plugin/theme, it invites multiple conflicts, including different versions of Piklist.</description>
    </item>
    
    <item>
      <title>Built-in Demos</title>
      <link>https://piklist.github.io/docs/getting-started/built-in-demos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/getting-started/built-in-demos/</guid>
      <description>Piklist allows you to work with WordPress like never before. At its basic level, you can easily create metaboxes/metafields (also known as custom fields) for Posts, Pages, media and user profiles, as well as easy Settings pages, Widgets and Dashboard Widgets. You will need to write a little bit of code to use Piklist, but it’s minimal and we’ve included lots of examples. Let’s get started!
 Install Piklist like you would any other Plugin.</description>
    </item>
    
    <item>
      <title>Why aren’t my fields saving?</title>
      <link>https://piklist.github.io/docs/faq/fields-not-saving/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/faq/fields-not-saving/</guid>
      <description>The most common reason for fields not saving is because a post type uses the default WordPress “custom fields” meta box. This meta box actually duplicates the inputs used by your fields.
If you are registering a post type, make sure custom-fields is not in the “supports” array.
To remove the custom-fields meta box from a WordPress default post type, or one that is registered by another plugin, use remove_post_type_support().</description>
    </item>
    
    <item>
      <title>Is there a limit on the number of Piklist fields?</title>
      <link>https://piklist.github.io/docs/faq/number-of-fields-limit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/faq/number-of-fields-limit/</guid>
      <description>There is no limit to how many fields you can create and display with Piklist. However, your server limits how many can be used on each page.
This is not a Piklist issue&amp;hellip; it&amp;rsquo;s part of your servers configuration.
The most common solution is adjusting your max_vars setting. This is a PHP setting which sets the maximum variables that can be used in one page load.
Once you increase this limit, Piklist can finish rendering all it&amp;rsquo;s fields.</description>
    </item>
    
    <item>
      <title>Update script not running</title>
      <link>https://piklist.github.io/docs/faq/update-script-not-running/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/faq/update-script-not-running/</guid>
      <description>Piklist allows you to easily create update scripts that run on certain versions of your plugin. If the script doesn&amp;rsquo;t run, you may have an issue with the piklist_active_plugin_versions setting:
 Backup your database Note which version of Piklist you are currently running. Deactivate and delete Piklist Open your database. In the wp_options table, look for this field: piklist_active_plugin_versions and delete it. Reinstall the same version of Piklist you had before.</description>
    </item>
    
    <item>
      <title>Piklist enable your theme</title>
      <link>https://piklist.github.io/docs/getting-started/piklist-enable-your-theme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/getting-started/piklist-enable-your-theme/</guid>
      <description>Adding Piklist meta-boxes, fields, settings pages, Widgets, etc. to your theme is very easy.
  First you need to add the proper folder structure to your theme. Piklist works by searching the active theme for the /piklist folder and then processing the sub-folders and files within it.
  Most Piklist code will go in the folder structure you set up. But other Piklist code, like registering Post Types, would go in your theme’s functions.</description>
    </item>
    
    <item>
      <title>Sanitizing Fields</title>
      <link>https://piklist.github.io/docs/fields/sanitizing-fields/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/fields/sanitizing-fields/</guid>
      <description>When writing field code, whether with Piklist or not, you should be extra cautious of how you handle data coming into WordPress and how it’s presented to the end user. Piklist makes sanitizing your data easy with the sanitize parameter.
Choose the appropriate type of sanitization for each of your fields.
email Strips out all characters that are not allowable in an email address.
Codex reference for parameters: sanitize_email
&amp;#39;sanitize&amp;#39; =&amp;gt; array( array( &amp;#39;type&amp;#39; =&amp;gt; &amp;#39;email&amp;#39; ) ) file_name Removes special characters that are illegal in filenames on certain operating systems and special characters requiring special escaping to manipulate at the command line.</description>
    </item>
    
    <item>
      <title>Writing a plugin for Piklist</title>
      <link>https://piklist.github.io/docs/getting-started/writing-a-plugin-for-piklist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/getting-started/writing-a-plugin-for-piklist/</guid>
      <description>Writing a plugin to take advantage of Piklist is very simple. The only additional step is registering your plugin with Piklist, otherwise, this is just like writing a regular WordPress plugin. Like all plugins, Piklist plugins also live in your wp-content/plugins/ folder.
Registering your plugin with Piklist When writing WordPress plugins that rely on other plugins, you usually have to use hooks and filters… but not with Piklist. We’ve simplified the process for you.</description>
    </item>
    
    <item>
      <title>Piklist Add-ons</title>
      <link>https://piklist.github.io/docs/getting-started/piklist-add-ons/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/getting-started/piklist-add-ons/</guid>
      <description>Piklist Add-ons allow you to put a plugin in your theme or Piklist plugin. This allows you to package full featured plugins that are only available when your theme or plugin is active.
A good example of this is the Piklist Demos that come with Piklist itself.
Creating a Piklist add-on is not much different than creating a Piklist plugin. The difference is, the plugin lives in the /add-ons folder in your theme or plugin.</description>
    </item>
    
    <item>
      <title>Validating Fields</title>
      <link>https://piklist.github.io/docs/fields/validating-fields/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/fields/validating-fields/</guid>
      <description>When writing field code, whether with Piklist or not, you should be extra cautious of how you handle data coming into WordPress and how it’s presented to the end user. Piklist makes validating your data easy with the validate parameter.
You can also create your own custom validation rules using the piklist_validation_rules filter.
Choose the appropriate type of validation for each of your fields.
email Verifies that the input is in the proper format for an email address.</description>
    </item>
    
    <item>
      <title>Create your own field</title>
      <link>https://piklist.github.io/docs/fields/create-your-own-fields/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/fields/create-your-own-fields/</guid>
      <description>With Piklist, you can easily create your own fields to use in your projects.
 To start, you should have a /parts folder in your theme or plugin to put Piklist parts files. Add a subfolder called /fields/. The structure should look like /parts/fields/. Create a file in the /fields/ folder. Any files in this folder can become fields automatically registered with Piklist. The name of your file is important since it will become the name of your field.</description>
    </item>
    
    <item>
      <title>Piklist checker</title>
      <link>https://piklist.github.io/docs/getting-started/piklist-checker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/getting-started/piklist-checker/</guid>
      <description>Use the Piklist checker when creating plugins that require Piklist. The Piklist Checker makes it easy for you to notify users from your plugin or theme when Piklist is not active. Since your plugin or theme requires Piklist, not having Piklist installed and activated would provide an unpleasant user experience. Piklist Checker is designed to alleviate that.
If the user attempts to activate a Piklist plugin or theme, without activating Piklist first, they will get a message notifying them the plugin was deactivated and instructions on how to get Piklist.</description>
    </item>
    
    <item>
      <title>Parse error: syntax error, unexpected T_FUNCTION</title>
      <link>https://piklist.github.io/docs/faq/parse-error-syntax-error-unexpected-t_function/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/faq/parse-error-syntax-error-unexpected-t_function/</guid>
      <description>If you’re getting this error, you are running an older version of PHP on your server.
Piklist, like WordPress, recommends PHP v5.6 or higher.
Please contact your host and ask them to upgrade you.</description>
    </item>
    
    <item>
      <title>Add fields to Media items</title>
      <link>https://piklist.github.io/docs/tutorials/media/add-fields-to-media/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/tutorials/media/add-fields-to-media/</guid>
      <description>Description Piklist makes it radically easy to add meta-boxes and fields to your media items. In this tutorial, we will create a meta-box that includes three fields, select, text and ColorPicker, for standard posts.
  New to Piklist?    Before you start this tutorial:  Install Piklist like you would any other WordPress plugin. Decide if you are going to add the code in this tutorial to your custom plugin or your theme.</description>
    </item>
    
    <item>
      <title>Add Subtitle field to the Post screen</title>
      <link>https://piklist.github.io/docs/tutorials/meta-boxes/add-subtitle-field/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/tutorials/meta-boxes/add-subtitle-field/</guid>
      <description>New to Piklist?    Before you start this tutorial:  Install Piklist like you would any other WordPress plugin. Decide if you are going to add the code in this tutorial to your custom plugin or your theme. This will define how to setup your Piklist folder structure. If you&#39;re new to Piklist, you may want to review the &#34;Getting Started&#34; tutorial first. It gives you a good overview of how Piklist works.</description>
    </item>
    
    <item>
      <title>Add WYSISYG to your Excerpt Box</title>
      <link>https://piklist.github.io/docs/tutorials/meta-boxes/add-wysisyg-excerpt-box/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/tutorials/meta-boxes/add-wysisyg-excerpt-box/</guid>
      <description>Description To add some style to your excerpts, you can easily add a WYSIWYG editor to your excerpt box.
First, remove the default excerpt box Custom post type If you’re registering your own post type, include the supports parameter but don’t include excerpt in the array. This will tell WordPress not to render the excerpt box.
Built in post type Use the standard WordPress function remove_post_type_support, to remove the editor. For example, to remove the editor from Posts, place this in your theme’s functions.</description>
    </item>
    
    <item>
      <title>Benefits of using Piklist</title>
      <link>https://piklist.github.io/docs/about-piklist/benefits-of-using-piklist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/about-piklist/benefits-of-using-piklist/</guid>
      <description>Piklist makes it super simple to add fields and data to almost every part of WordPress:
 Use minimal code to generate complex fields. Code-based for maximum flexibility. Use the same field code to generate a post-meta field or a settings field or a user field&amp;hellip; Packed with hooks and filters so you can modify almost everything in WordPress. Enterprise level code quality.  </description>
    </item>
    
    <item>
      <title>Building Pointers without code</title>
      <link>https://piklist.github.io/docs/tutorials/pointers/building-pointers-without-code/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/tutorials/pointers/building-pointers-without-code/</guid>
      <description>Description Piklist let&amp;rsquo;s you build WordPress Pointers without code. No PHP. No Javascript.
In this tutorial, we will create a simple WordPress pointer.
  New to Piklist?    Before you start this tutorial:  Install Piklist like you would any other WordPress plugin. Decide if you are going to add the code in this tutorial to your custom plugin or your theme. This will define how to setup your Piklist folder structure.</description>
    </item>
    
    <item>
      <title>Building Settings Pages</title>
      <link>https://piklist.github.io/docs/tutorials/settings/building-settings-pages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/tutorials/settings/building-settings-pages/</guid>
      <description>Creating WordPress Settings pages with Piklist is as easy as creating any other field type. First we register the Settings page, and then we start adding Settings sections. Piklist uses the standard WordPress settings API, plus it adds extra power and ease of use. You can use any Piklist field type on a Settings page, and easily add Tabs as well.
In this tutorial, we will create a Settings Page that includes three fields: select, text and colorPicker, with tooltip help.</description>
    </item>
    
    <item>
      <title>checkbox Field</title>
      <link>https://piklist.github.io/docs/fields/types/checkbox/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/fields/types/checkbox/</guid>
      <description>&#39;type&#39; =&amp;gt; &#39;checkbox&#39; piklist(&amp;#39;field&amp;#39;, array( &amp;#39;type&amp;#39; =&amp;gt; &amp;#39;checkbox&amp;#39;, &amp;#39;field&amp;#39; =&amp;gt; &amp;#39;checkbox&amp;#39;, &amp;#39;label&amp;#39; =&amp;gt; &amp;#39;Checkbox&amp;#39;, &amp;#39;value&amp;#39; =&amp;gt; &amp;#39;third&amp;#39;, // set default value  &amp;#39;choices&amp;#39; =&amp;gt; array( &amp;#39;first&amp;#39; =&amp;gt; &amp;#39;First Choice&amp;#39;, ,&amp;#39;second&amp;#39; =&amp;gt; &amp;#39;Second Choice&amp;#39;, ,&amp;#39;third&amp;#39; =&amp;gt; &amp;#39;Third Choice&amp;#39; ) )); </description>
    </item>
    
    <item>
      <title>color Field</title>
      <link>https://piklist.github.io/docs/fields/types/color/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/fields/types/color/</guid>
      <description>&#39;type&#39; =&amp;gt; &#39;color&#39; This is an HTML5 field
piklist(&amp;#39;field&amp;#39;, array( &amp;#39;type&amp;#39; =&amp;gt; &amp;#39;color&amp;#39;, &amp;#39;field&amp;#39; =&amp;gt; &amp;#39;my_field&amp;#39;, &amp;#39;label&amp;#39; =&amp;gt; &amp;#39;Color field&amp;#39;, )); </description>
    </item>
    
    <item>
      <title>colorpicker Field</title>
      <link>https://piklist.github.io/docs/fields/types/colorpicker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/fields/types/colorpicker/</guid>
      <description>&#39;type&#39; =&amp;gt; &#39;colorpicker&#39; Create a WordPress colorpicker field.
You can use Piklist field parameters to customize this field.
piklist(&#39;field&#39;, array( &#39;type&#39; =&amp;gt; &#39;colorpicker&#39;, &#39;field&#39; =&amp;gt; &#39;my_color&#39;, &#39;label&#39; =&amp;gt; &#39;Color Picker&#39; )); </description>
    </item>
    
    <item>
      <title>Conditionally Show Fields</title>
      <link>https://piklist.github.io/docs/tutorials/fields/conditionally-show-fields/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/tutorials/fields/conditionally-show-fields/</guid>
      <description>Description Piklist makes it easy to show one or more fields, based on the value of another field, and so much more. The Piklist conditions parameter is very powerful, and you can see all the options in the documentation.
In this tutorial, if the user clicks on the “Yes” radio button to subscribe to our newsletter, we will show an “Email” text field.
  Conditional fields work on almost every page in WordPress.</description>
    </item>
    
    <item>
      <title>Creating Custom Post Statuses</title>
      <link>https://piklist.github.io/docs/tutorials/meta-boxes/creating-custom-post-statuses/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/tutorials/meta-boxes/creating-custom-post-statuses/</guid>
      <description>Custom Post Statuses are at the heart of any web application built with WordPress, and Piklist makes it easy for you to implement them. No longer are you stuck with draft, pending review and published. You can add whatever post statuses you choose.
A few important caveats:
 Due to the nature of WordPress, your first post status has to remain “draft”. You can change the label so it displays “New”, or “Howdy”, but the key in the post status array will have to remain draft (we’ll explain more later in the tutorial).</description>
    </item>
    
    <item>
      <title>Creating Help Tabs for WordPress</title>
      <link>https://piklist.github.io/docs/tutorials/help/creating-help-tabs-for-wordpress/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/tutorials/help/creating-help-tabs-for-wordpress/</guid>
      <description>Description Creating Help Tabs for WordPress is super easy with Piklist.
In this example, we&amp;rsquo;ll create some help for your custom Post Type. You should already have a custom Post Type registered and working in WordPress.
  New to Piklist?    Before you start this tutorial:  Install Piklist like you would any other WordPress plugin. Decide if you are going to add the code in this tutorial to your custom plugin or your theme.</description>
    </item>
    
    <item>
      <title>Creating Separate Taxonomies for each User</title>
      <link>https://piklist.github.io/docs/tutorials/taxonomies-terms/creating-separate-taxonomies-user/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/tutorials/taxonomies-terms/creating-separate-taxonomies-user/</guid>
      <description>In this tutorial we’ll provide each logged in user with their own set of private tags.
  New to Piklist?    Before you start this tutorial:  Install Piklist like you would any other WordPress plugin. Decide if you are going to add the code in this tutorial to your custom plugin or your theme. This will define how to setup your Piklist folder structure. If you&#39;re new to Piklist, you may want to review the &#34;</description>
    </item>
    
    <item>
      <title>date Field</title>
      <link>https://piklist.github.io/docs/fields/types/date/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/fields/types/date/</guid>
      <description>&#39;type&#39; =&amp;gt; &#39;date&#39; This is an HTML5 field
piklist(&amp;#39;field&amp;#39;, array( &amp;#39;type&amp;#39; =&amp;gt; &amp;#39;date&amp;#39;, &amp;#39;field&amp;#39; =&amp;gt; &amp;#39;my_field&amp;#39;, &amp;#39;label&amp;#39; =&amp;gt; &amp;#39;Date field&amp;#39;, )); </description>
    </item>
    
    <item>
      <title>datepicker Field</title>
      <link>https://piklist.github.io/docs/fields/types/datepicker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/fields/types/datepicker/</guid>
      <description>&#39;type&#39; =&amp;gt; &#39;datepicker&#39; Create a jQuery datepicker field.
This field uses the standard jQuery DatePicker field, and respects the same options. Just define them in the Piklist options array. See examples below.
You can use Piklist field parameters to customize this field.
Basic Datepicker field
piklist(&#39;field&#39;, array( &#39;type&#39; =&amp;gt; &#39;datepicker&#39;, &#39;field&#39; =&amp;gt; &#39;my_date_field&#39;, &#39;label&#39; =&amp;gt; &#39;Date&#39;, &#39;value&#39; =&amp;gt; date(&#39;M d, Y&#39;, time() + 604800), // set default value &#39;options&#39; =&amp;gt; array( &#39;dateFormat&#39; =&amp;gt; &#39;M d, yy&#39; ) )); Localizing the Datepicker field</description>
    </item>
    
    <item>
      <title>Display Menus as a Radio, Checkbox or Select list</title>
      <link>https://piklist.github.io/docs/tutorials/fields/display-menus-radio-checkbox-select-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/tutorials/fields/display-menus-radio-checkbox-select-list/</guid>
      <description>Description Using Piklist you can easily display your Menus as Radio, Checkboxes or a Select list (dropdowns). Easily include them in custom theme settings, or when creating posts. This simple tutorial will show you how.
  New to Piklist?    Before you start this tutorial:  Install Piklist like you would any other WordPress plugin. Decide if you are going to add the code in this tutorial to your custom plugin or your theme.</description>
    </item>
    
    <item>
      <title>Display Taxonomies as Radio, Checkboxes or Select list</title>
      <link>https://piklist.github.io/docs/tutorials/taxonomies-terms/display-taxonomies-radio-checkboxes-select-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/tutorials/taxonomies-terms/display-taxonomies-radio-checkboxes-select-list/</guid>
      <description>Using Piklist you can easily display your Taxonomies as Radio, Checkboxes or a Select list (dropdowns). This simple tutorial will show you how.
  New to Piklist?    Before you start this tutorial:  Install Piklist like you would any other WordPress plugin. Decide if you are going to add the code in this tutorial to your custom plugin or your theme. This will define how to setup your Piklist folder structure.</description>
    </item>
    
    <item>
      <title>Display Users as a Radio, Checkbox or Select list</title>
      <link>https://piklist.github.io/docs/tutorials/users/display-users-radio-checkbox-select-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/tutorials/users/display-users-radio-checkbox-select-list/</guid>
      <description>Using Piklist you can easily display your Users as Radio, Checkboxes or a Select list (dropdowns). This simple tutorial will show you how.
  New to Piklist?    Before you start this tutorial:  Install Piklist like you would any other WordPress plugin. Decide if you are going to add the code in this tutorial to your custom plugin or your theme. This will define how to setup your Piklist folder structure.</description>
    </item>
    
    <item>
      <title>editor Field</title>
      <link>https://piklist.github.io/docs/fields/types/editor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/fields/types/editor/</guid>
      <description>&#39;type&#39; =&amp;gt; &#39;editor&#39; Create a standard WordPress editor field.
You can use Piklist field parameters to customize this field.
Custom Parameters The editor field takes any option that can be passed to the WordPress wp_editor() function. You can pass them through the options array. See examples below.
Examples Basic Editor Field
piklist(&#39;field&#39;, array( &#39;type&#39; =&amp;gt; &#39;editor&#39;, &#39;field&#39; =&amp;gt; &#39;my_editor_field&#39;, &#39;label&#39; =&amp;gt; &#39;Post Content&#39; )); Default Editor
Piklist can replace the default editor in WordPress by using code the following code.</description>
    </item>
    
    <item>
      <title>email Field</title>
      <link>https://piklist.github.io/docs/fields/types/email/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/fields/types/email/</guid>
      <description>&#39;type&#39; =&amp;gt; &#39;email&#39; This is an HTML5 field
piklist(&amp;#39;field&amp;#39;, array( &amp;#39;type&amp;#39; =&amp;gt; &amp;#39;email&amp;#39;, &amp;#39;field&amp;#39; =&amp;gt; &amp;#39;my_field&amp;#39;, &amp;#39;label&amp;#39; =&amp;gt; &amp;#39;my field&amp;#39;, )); </description>
    </item>
    
    <item>
      <title>Field Parameters</title>
      <link>https://piklist.github.io/docs/fields/field-parameters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/fields/field-parameters/</guid>
      <description>This is a full list of available parameters for Piklist fields.
add_more (repeater) Piklist allows you to turn ANY field, or group of fields, into a repeater field, by simple adding the add_more parameter.
Displaying Data To display the results of the Add-More in your theme, pull the data like you normally would. Add more’s save data as an array, so you can loop though the data to display.
 Input: boolean Default: false  Example: &#39;add_more&#39; =&amp;gt; true</description>
    </item>
    
    <item>
      <title>file (upload) Field</title>
      <link>https://piklist.github.io/docs/fields/types/file/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/fields/types/file/</guid>
      <description>&#39;type&#39; =&amp;gt; &#39;file&#39; Create a file upload field. Uses either the WordPress media uploader, or a basic uploader.
Custom Parameters The file field takes the following custom parameters. Include them within the options array.
basic
Piklist allows for two different file upload fields in the WordPress admin, a Basic uploader and the standard Media uploader. To use the Media uploader, do not set this parameter at all.
NOTES:
  The basic uploader is not supported in Widgets.</description>
    </item>
    
    <item>
      <title>Getting started with Shortcodes</title>
      <link>https://piklist.github.io/docs/tutorials/shortcodes/getting-started-with-shortcodes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/tutorials/shortcodes/getting-started-with-shortcodes/</guid>
      <description>Description Creating Shortcodes with Piklist is super easy. In this tutorial, we&amp;rsquo;ll create a shortcode to display post meta in your post content.
  New to Piklist?    Before you start this tutorial:  Install Piklist like you would any other WordPress plugin. Decide if you are going to add the code in this tutorial to your custom plugin or your theme. This will define how to setup your Piklist folder structure.</description>
    </item>
    
    <item>
      <title>group Field</title>
      <link>https://piklist.github.io/docs/fields/types/group/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/fields/types/group/</guid>
      <description>&#39;type&#39; =&amp;gt; &#39;group&#39; Adds a group of fields.
If the main `field` parameter is set, a serialized array is created of all the fields in the group. Not including it saves all the fields as individual meta. Individual meta can easily be searched.  The `columns` field parameter is especially helpful in Field Groups for more complex layouts like address blocks.  Examples piklist(&amp;#39;field&amp;#39;, array( &amp;#39;type&amp;#39; =&amp;gt; &amp;#39;group&amp;#39; ,&amp;#39;field&amp;#39; =&amp;gt; &amp;#39;address_group&amp;#39; // removing this parameter saves all fields as separate meta  ,&amp;#39;label&amp;#39; =&amp;gt; __(&amp;#39;Address (Grouped)&amp;#39;, &amp;#39;piklist-demo&amp;#39;) ,&amp;#39;list&amp;#39; =&amp;gt; false ,&amp;#39;description&amp;#39; =&amp;gt; __(&amp;#39;A grouped field with the field parameter set.</description>
    </item>
    
    <item>
      <title>Grouping child taxonomies by their parents</title>
      <link>https://piklist.github.io/docs/tutorials/taxonomies-terms/grouping-child-taxonomies-parents/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/tutorials/taxonomies-terms/grouping-child-taxonomies-parents/</guid>
      <description>WordPress hierarchical taxonomies allow you to assign terms to a parent term. In this tutorial we’ll show you how to group the child terms under each parent, and make the parent unselectable, forcing the user to only select the children.
The basis of this tutorial is the flexibility of the Piklist field function, which we will place in a foreach loop.
This tutorial assumes you have already created a hierarchical taxonomy or you’re using the default WordPress Categories.</description>
    </item>
    
    <item>
      <title>hidden Field</title>
      <link>https://piklist.github.io/docs/fields/types/hidden/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/fields/types/hidden/</guid>
      <description>&#39;type&#39; =&amp;gt; &#39;hidden&#39; piklist(&amp;#39;field&amp;#39;, array( &amp;#39;type&amp;#39; =&amp;gt; &amp;#39;hidden&amp;#39;, &amp;#39;field&amp;#39; =&amp;gt; &amp;#39;post_id&amp;#39;, &amp;#39;value&amp;#39; =&amp;gt; $post-&amp;gt;ID // set the value of this hidden field to the Post ID.  )); </description>
    </item>
    
    <item>
      <title>Hide Meta Boxes for a Page Template</title>
      <link>https://piklist.github.io/docs/tutorials/meta-boxes/hide-meta-boxes-page-template/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/tutorials/meta-boxes/hide-meta-boxes-page-template/</guid>
      <description>Using Piklist, you can easily hide some meta boxes when a certain page template is selected in WordPress. This tutorial will show you how using two Piklist filters: piklist_get_file_data and piklist_add_part.
All of the code in this tutorial will go in your theme’s functions.php file, or your main plugin file.
Add a custom parameter to the Piklist comment block. Pikist uses a number of parameters in the comment block to control access to a meta box.</description>
    </item>
    
    <item>
      <title>html Field</title>
      <link>https://piklist.github.io/docs/fields/types/html/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/fields/types/html/</guid>
      <description>&#39;type&#39; =&amp;gt; &#39;html&#39; The Piklist html field, allows you to render standard HTML markup and keep the same label/field format as the rest of your fields.
You can use Piklist field parameters to customize this field.
piklist(&#39;field&#39;, array( &#39;type&#39; =&amp;gt; &#39;html&#39;, &#39;label&#39; =&amp;gt; &#39;HTML Field&#39;, &#39;value&#39; =&amp;gt; &#39;&amp;lt;strong&amp;gt;This is some html&amp;lt;/strong&amp;gt;&#39;, )); </description>
    </item>
    
    <item>
      <title>License</title>
      <link>https://piklist.github.io/docs/about-piklist/license/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/about-piklist/license/</guid>
      <description>The license under which the Piklist software is released is the same as WordPress; the GPLv2 (or later) from the Free Software Foundation. A copy of the license is included with every copy of Piklist, but you can also read the text of the license here.</description>
    </item>
    
    <item>
      <title>Lock Field Values based on Post Status</title>
      <link>https://piklist.github.io/docs/tutorials/meta-boxes/lock-field-values-based-post-status/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/tutorials/meta-boxes/lock-field-values-based-post-status/</guid>
      <description>Description Piklist allows you to lock a field value (making it read-only), when the post status changes. A perfect example of this is if you want to lock post meta once a post is published.
  New to Piklist?    Before you start this tutorial:  Install Piklist like you would any other WordPress plugin. Decide if you are going to add the code in this tutorial to your custom plugin or your theme.</description>
    </item>
    
    <item>
      <title>month Field</title>
      <link>https://piklist.github.io/docs/fields/types/month/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/fields/types/month/</guid>
      <description>&#39;type&#39; =&amp;gt; &#39;month&#39; This is an HTML5 field
piklist(&amp;#39;field&amp;#39;, array( &amp;#39;type&amp;#39; =&amp;gt; &amp;#39;month&amp;#39;, &amp;#39;field&amp;#39; =&amp;gt; &amp;#39;my_field&amp;#39;, &amp;#39;label&amp;#39; =&amp;gt; &amp;#39;email field&amp;#39;, )); </description>
    </item>
    
    <item>
      <title>number Field</title>
      <link>https://piklist.github.io/docs/fields/types/number/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/fields/types/number/</guid>
      <description>&#39;type&#39; =&amp;gt; &#39;number&#39; This is an HTML5 field
piklist(&amp;#39;field&amp;#39;, array( &amp;#39;type&amp;#39; =&amp;gt; &amp;#39;number&amp;#39;, &amp;#39;field&amp;#39; =&amp;gt; &amp;#39;my_field&amp;#39;, &amp;#39;label&amp;#39; =&amp;gt; &amp;#39;my field&amp;#39;, )); </description>
    </item>
    
    <item>
      <title>piklist_admin_pages</title>
      <link>https://piklist.github.io/docs/actions-filters/filters/piklist_admin_pages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/actions-filters/filters/piklist_admin_pages/</guid>
      <description>apply_filters(&#39;piklist_admin_pages&#39;, array()); The piklist_admin_pages filter lets you register your custom Admin Pages through Piklist. This gives you access to additional functionality that Piklist offers.
To register an Admin Page with Piklist:
 Create a function with your Admin Page parameters. Hook it to the piklist_admin_pages() filter.  This code goes in your theme&amp;rsquo;s functions.php file or your plugin file.
Parameters This filter supports every parameter that add_menu_page() supports. Additionally, you may use the following Piklist specific parameters.</description>
    </item>
    
    <item>
      <title>piklist_empty_post_title</title>
      <link>https://piklist.github.io/docs/actions-filters/filters/piklist_empty_post_title/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/actions-filters/filters/piklist_empty_post_title/</guid>
      <description>apply_filters(&#39;piklist_empty_post_title&#39;, $data[&#39;post_title&#39;], $post_array); Let’s you programmatically set the post title when adding a new post (post type).
Example:
// Set the Post Title to &amp;quot;Order #&amp;quot; plus post ID: function set_post_title_to_order_number($data, $post_array) { if ($post_array[&#39;post_type&#39;] == &#39;MY-POST-TYPE&#39;) { return &#39;Order #&#39; . $post_array[&#39;ID&#39;]; } else { return $data; } } add_filter(&#39;piklist_empty_post_title&#39;, &#39;set_post_title_to_order_number&#39;, 10, 2); IMPORTANT: This filter works best when there is no title field for posts. To disable the title field, do not pass &amp;ldquo;title&amp;rdquo; to the supports parameter when registering a post type.</description>
    </item>
    
    <item>
      <title>piklist_part_process</title>
      <link>https://piklist.github.io/docs/actions-filters/filters/piklist_part_process/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/actions-filters/filters/piklist_part_process/</guid>
      <description>apply_filters(&#39;piklist_part_process&#39;, $_part, $folder); The piklist_part_process filter is used to filter the parts (e.g. meta-boxes, settings, etc.) before they are saved. This allows you to modify or remove parts before they’re processed.
Parameters $part The individual part (e.g. meta-box, setting, etc.) to be modified or removed. It’s an associative array that contains all the information about the part.
 Input: Array  $folder The folder the part is stored in. If it’s a meta-box, then this would be “meta-boxes”.</description>
    </item>
    
    <item>
      <title>piklist_part_process-{$folder}</title>
      <link>https://piklist.github.io/docs/actions-filters/filters/piklist_part_process_folder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/actions-filters/filters/piklist_part_process_folder/</guid>
      <description>apply_filters(&amp;quot;piklist_part_process-{$folder}&amp;quot;, $_part); The piklist_part_process-{$folder} filter is used to filter the parts (e.g. meta-boxes, settings, etc.) before they are saved. This allows you to modify or remove parts before they’re processed.
Parameters $folder The parts folder you want to filter (e.g. meta-boxes, settings, etc.)
$part The individual part (e.g. meta-box, setting, etc.) to be modified or removed. It’s an associative array that contains all the information about the part.
 Input: Array  $folder The folder the part is stored in.</description>
    </item>
    
    <item>
      <title>piklist_parts_process-{$folder}</title>
      <link>https://piklist.github.io/docs/actions-filters/actions/piklist_parts_process-folder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/actions-filters/actions/piklist_parts_process-folder/</guid>
      <description>do_action(&amp;quot;piklist_parts_process-{$folder}&amp;quot;); Class class-piklist.php
Arguments $folder The parts folder where the file is located ( e.g. meta-boxes, notices, terms, users, etc.).</description>
    </item>
    
    <item>
      <title>piklist_parts_processed-{$folder}</title>
      <link>https://piklist.github.io/docs/actions-filters/actions/piklist_parts_processed-folder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/actions-filters/actions/piklist_parts_processed-folder/</guid>
      <description>do_action(&amp;quot;piklist_parts_processed-{$folder}&amp;quot;); Class class-piklist.php
Arguments $folder The parts folder where the file is located ( e.g. meta-boxes, notices, terms, users, etc.).</description>
    </item>
    
    <item>
      <title>piklist_post_types</title>
      <link>https://piklist.github.io/docs/actions-filters/filters/piklist_post_types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/actions-filters/filters/piklist_post_types/</guid>
      <description>apply_filters(&#39;piklist_post_types&#39;, self::$post_types); The piklist_post_types filter lets you register your custom Post Types through Piklist. This gives you access to additional functionality that Piklist offers.
To register a Post Type with Piklist:
 Create a function with your Post Type parameters. Hook it to the piklist_post_types() filter.  This code goes in your theme&amp;rsquo;s functions.php file or your plugin file.
Parameters This filter supports every parameter that register_post_type() supports. Additionally, you may use the following Piklist specific parameters.</description>
    </item>
    
    <item>
      <title>piklist_pre_update_option</title>
      <link>https://piklist.github.io/docs/actions-filters/filters/piklist_pre_update_option/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/actions-filters/filters/piklist_pre_update_option/</guid>
      <description>apply_filters(&#39;piklist_pre_update_option&#39;, $settings, $setting, $new, $old); The piklist_pre_update_option filter is used to filter the settings input before they are saved. This allows you to manipulate the input data, or even add additional settings before the data is entered into the database.
Parameters This filter provides you with the following parameters:
$settings All key=&amp;gt;value pairs for this setting. If you are using multiple tabs, this will show all settings for all tabs.</description>
    </item>
    
    <item>
      <title>piklist_pre_update_option_$setting</title>
      <link>https://piklist.github.io/docs/actions-filters/filters/piklist_pre_update_option_setting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/actions-filters/filters/piklist_pre_update_option_setting/</guid>
      <description>apply_filters(&#39;piklist_pre_update_option_&#39; . $setting, $settings, $new, $old); The piklist_pre_update_option_$setting filter is used to filter the settings input before they are saved. This allows you to manipulate the input data, or even add additional settings before the data is entered into the database.
Parameters This filter provides you with the following parameters:
$settings All key=&amp;gt;value pairs for this setting. If you are using multiple tabs, this will show all settings for all tabs.</description>
    </item>
    
    <item>
      <title>piklist_sanitization_rules</title>
      <link>https://piklist.github.io/docs/actions-filters/filters/piklist_sanitization_rules/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/actions-filters/filters/piklist_sanitization_rules/</guid>
      <description>apply_filters(&#39;piklist_sanitization_rules&#39;, self::$sanitization_rules); Add your own rules to sanitize field data.
Example:
// create a sanitization rule called &amp;quot;my_email_sanitization&amp;quot; add_filter(&#39;piklist_sanitization_rules&#39;, &#39;sanitize_email_function&#39;, 11); function sanitize_email_function($sanitization_rules) { $sanitization_rules[&#39;my_email_sanitization&#39;] = array( &#39;callback&#39; =&amp;gt; &#39;sanitize_email_callback&#39; ); return $sanitization_rules; } function sanitize_email_callback($value, $field, $options) { return sanitize_email($value); // sanitize_email() is a core WordPress function } Usage:
&#39;sanitize&#39; =&amp;gt; array( array( &#39;type&#39; =&amp;gt; &#39;my_email_sanitization&#39; ) ) </description>
    </item>
    
    <item>
      <title>piklist_taxonomies</title>
      <link>https://piklist.github.io/docs/actions-filters/filters/piklist_taxonomies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/actions-filters/filters/piklist_taxonomies/</guid>
      <description>apply_filters(&#39;piklist_taxonomies&#39;, self::$taxonomies); Extends the standard WordPress function register_taxonomy() with additional features and parameters.
Parameters piklist_taxonomies supports all parameters from register_taxonomy() as well as these custom parameters:
object_type To create a taxonomy for USERS set this parameter user
 Input: Boolean  Example:
&#39;object_type&#39; =&amp;gt; &#39;user
hide_meta_box Hide the meta box created by this taxonomy
 Input: Boolean  Example:
&amp;quot;hide_meta_box&amp;quot; =&amp;gt; true
meta_box_filter Add a filter to this meta box to make it easier to search for terms.</description>
    </item>
    
    <item>
      <title>piklist_validation_rules</title>
      <link>https://piklist.github.io/docs/actions-filters/filters/piklist_validation_rules/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/actions-filters/filters/piklist_validation_rules/</guid>
      <description>apply_filters(&#39;piklist_validation_rules&#39;, self::$validation_rules); Add your own rules to validate field data.
Example:
add_filter(&#39;piklist_validation_rules&#39;, &#39;check_valid_number&#39;, 11); function check_valid_number($validation_rules) { $validation_rules[&#39;my_number&#39;] = array( &#39;rule&#39; =&amp;gt; &amp;quot;/[-+]?[0-9]*[.,]?[0-9]+/&amp;quot; ,&#39;message&#39; =&amp;gt; __(&#39;is not a number&#39;) ); return $validation_rules; } Usage:
&#39;validate&#39; =&amp;gt; array( array( &#39;type&#39; =&amp;gt; &#39;my_number&#39; ) ) Create a rule with a callback function:
// Create a validation rule called &amp;quot;my_file_exists&amp;quot; add_filter(&#39;piklist_validation_rules&#39;, &#39;check_file_exists&#39;, 11); function check_file_exists($validation_rules) { $validation_rules[&#39;my_file_exists&#39;] = array( &#39;callback&#39; =&amp;gt; &#39;my_validate_file_exists&#39; ); return $validation_rules; } /** * @param int $index The field index being checked.</description>
    </item>
    
    <item>
      <title>Placing &#34;Add New Post&#34; in a Workflow</title>
      <link>https://piklist.github.io/docs/tutorials/workflows/placing-add-new-post-workflow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/tutorials/workflows/placing-add-new-post-workflow/</guid>
      <description>Piklist’s Workflow system is incredibly powerful. It allows you to divide a page into different tabs. In this tutorial, we’ll use the Workflows to divide the default WordPress add new Post page.
  Review the &amp;ldquo;Building Your First Workflow&amp;rdquo; tutorial to get an idea how they work. For this tutorial, we will need to create one Workflow HEADER, and two Workflow TAB files. Additionally, we will need to write a quick function as well.</description>
    </item>
    
    <item>
      <title>radio Field</title>
      <link>https://piklist.github.io/docs/fields/types/radio/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/fields/types/radio/</guid>
      <description>&#39;type&#39; =&amp;gt; &#39;radio&#39; piklist(&#39;field&#39;, array( &#39;type&#39; =&amp;gt; &#39;radio&#39;, &#39;field&#39; =&amp;gt; &#39;my_radio&#39;, &#39;label&#39; =&amp;gt; &#39;Radio&#39;, &#39;choices&#39; =&amp;gt; array( &#39;first&#39; =&amp;gt; &#39;First Choice&#39;, &#39;second&#39; =&amp;gt; &#39;Second Choice&#39;, &#39;third&#39; =&amp;gt; &#39;Third Choice&#39; ) )); </description>
    </item>
    
    <item>
      <title>range Field</title>
      <link>https://piklist.github.io/docs/fields/types/range/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/fields/types/range/</guid>
      <description>&#39;type&#39; =&amp;gt; &#39;range&#39; This is an HTML5 field
piklist(&amp;#39;field&amp;#39;, array( &amp;#39;type&amp;#39; =&amp;gt; &amp;#39;range&amp;#39;, &amp;#39;field&amp;#39; =&amp;gt; &amp;#39;my_field&amp;#39;, &amp;#39;label&amp;#39; =&amp;gt; &amp;#39;my field&amp;#39;, &amp;#39;attributes&amp;#39; =&amp;gt; array( &amp;#39;min&amp;#39; =&amp;gt; 5 ,&amp;#39;max&amp;#39; =&amp;gt; 30 ,&amp;#39;step&amp;#39; =&amp;gt; 5 ) )); </description>
    </item>
    
    <item>
      <title>Registering Post Types</title>
      <link>https://piklist.github.io/docs/tutorials/meta-boxes/registering-post-types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/tutorials/meta-boxes/registering-post-types/</guid>
      <description>Piklist works well with existing Post Types… those created with the standard WordPress function register_post_type. However, you can add some extra power to your Post Types by registering them the Piklist way. Piklist extends the register_post_type function with extra parameters to enable extra features. You can use the standard register_post_type() parameters, plus the additional Piklist Custom Post Type parameters.
To learn more about registering Post Types with Piklist, please read about the piklist_post_types filter.</description>
    </item>
    
    <item>
      <title>Save Shortcode data to database</title>
      <link>https://piklist.github.io/docs/tutorials/shortcodes/save-shortcode-data-to-database/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/tutorials/shortcodes/save-shortcode-data-to-database/</guid>
      <description>Description With Piklist you can save shortcode data to your database instead of the WordPress editor.
  New to Piklist?    Before you start this tutorial:  Install Piklist like you would any other WordPress plugin. Decide if you are going to add the code in this tutorial to your custom plugin or your theme. This will define how to setup your Piklist folder structure. If you&#39;re new to Piklist, you may want to review the &#34;</description>
    </item>
    
    <item>
      <title>search Field</title>
      <link>https://piklist.github.io/docs/fields/types/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/fields/types/search/</guid>
      <description>&#39;type&#39; =&amp;gt; &#39;search&#39; This is an HTML5 field
piklist(&amp;#39;field&amp;#39;, array( &amp;#39;type&amp;#39; =&amp;gt; &amp;#39;search&amp;#39;, &amp;#39;field&amp;#39; =&amp;gt; &amp;#39;my_field&amp;#39;, &amp;#39;label&amp;#39; =&amp;gt; &amp;#39;my field&amp;#39;, )); </description>
    </item>
    
    <item>
      <title>select Field</title>
      <link>https://piklist.github.io/docs/fields/types/select/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/fields/types/select/</guid>
      <description>&#39;type&#39; =&amp;gt; &#39;select&#39; Basic Select Field
piklist(&amp;#39;field&amp;#39;, array( &amp;#39;type&amp;#39; =&amp;gt; &amp;#39;select&amp;#39;, &amp;#39;field&amp;#39; =&amp;gt; &amp;#39;my_select&amp;#39;, &amp;#39;label&amp;#39; =&amp;gt; &amp;#39;My select&amp;#39;, &amp;#39;choices&amp;#39; =&amp;gt; array( &amp;#39;first&amp;#39; =&amp;gt; &amp;#39;First Choice&amp;#39;, &amp;#39;second&amp;#39; =&amp;gt; &amp;#39;Second Choice&amp;#39;, &amp;#39;third&amp;#39; =&amp;gt; &amp;#39;Third Choice&amp;#39; ) )); Select Field with Optgroup
piklist(&amp;#39;field&amp;#39;, array( &amp;#39;type&amp;#39; =&amp;gt; &amp;#39;select&amp;#39; ,&amp;#39;field&amp;#39; =&amp;gt; &amp;#39;select_optgroup&amp;#39; ,&amp;#39;label&amp;#39; =&amp;gt; __(&amp;#39;Select with Option Groups&amp;#39;, &amp;#39;piklist-demo&amp;#39;) ,&amp;#39;value&amp;#39; =&amp;gt; &amp;#39;third&amp;#39; ,&amp;#39;choices&amp;#39; =&amp;gt; array( &amp;#39;Group 1&amp;#39; =&amp;gt; array( &amp;#39;first&amp;#39; =&amp;gt; __(&amp;#39;First Choice&amp;#39;, &amp;#39;piklist-demo&amp;#39;) ,&amp;#39;second&amp;#39; =&amp;gt; __(&amp;#39;Second Choice&amp;#39;, &amp;#39;piklist-demo&amp;#39;) ,&amp;#39;third&amp;#39; =&amp;gt; __(&amp;#39;Third Choice&amp;#39;, &amp;#39;piklist-demo&amp;#39;) ) ,&amp;#39;Group 2&amp;#39; =&amp;gt; array( &amp;#39;first&amp;#39; =&amp;gt; __(&amp;#39;First Choice&amp;#39;, &amp;#39;piklist-demo&amp;#39;) ,&amp;#39;second&amp;#39; =&amp;gt; __(&amp;#39;Second Choice&amp;#39;, &amp;#39;piklist-demo&amp;#39;) ,&amp;#39;third&amp;#39; =&amp;gt; __(&amp;#39;Third Choice&amp;#39;, &amp;#39;piklist-demo&amp;#39;) ) ) )); Multiselect</description>
    </item>
    
    <item>
      <title>Show Fields by User Capability or Role</title>
      <link>https://piklist.github.io/docs/tutorials/fields/show-fields-user-capability-role/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/tutorials/fields/show-fields-user-capability-role/</guid>
      <description>With web applications and powerful websites, there will be times you want to only show a metabox or metafield to a particular user role or capability. For an Order Management system you may want your customers to see certain fields, while your employees can see them all. Or maybe you want Administrators and Editors to be able to leave notes on a post that no one else can see. Well, Piklist makes it easy to do just that.</description>
    </item>
    
    <item>
      <title>Show Metaboxes and Fields by Post Status</title>
      <link>https://piklist.github.io/docs/tutorials/meta-boxes/show-metaboxes-fields-post-status/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/tutorials/meta-boxes/show-metaboxes-fields-post-status/</guid>
      <description>With web applications and powerful websites, there will be times you want to only show a meta-box or metafield when a post is in a particular post status. This becomes extra powerful when paired with the Piklist capability parameter, which allows you to show/hide a field based on a user role or capability. For an Order Management system, you may want an order notes field hidden until the estimate becomes an order.</description>
    </item>
    
    <item>
      <title>tel Field</title>
      <link>https://piklist.github.io/docs/fields/types/tel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/fields/types/tel/</guid>
      <description>&#39;type&#39; =&amp;gt; &#39;tel&#39; This is an HTML5 field
piklist(&amp;#39;field&amp;#39;, array( &amp;#39;type&amp;#39; =&amp;gt; &amp;#39;tel&amp;#39;, &amp;#39;field&amp;#39; =&amp;gt; &amp;#39;my_field&amp;#39;, &amp;#39;label&amp;#39; =&amp;gt; &amp;#39;my field&amp;#39;, )); </description>
    </item>
    
    <item>
      <title>text Field</title>
      <link>https://piklist.github.io/docs/fields/types/text/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/fields/types/text/</guid>
      <description>&#39;type&#39; =&amp;gt; &#39;text&#39; piklist(&amp;#39;field&amp;#39;, array( &amp;#39;type&amp;#39; =&amp;gt; &amp;#39;text&amp;#39;, &amp;#39;field&amp;#39; =&amp;gt; &amp;#39;my_text&amp;#39;, &amp;#39;label&amp;#39; =&amp;gt; &amp;#39;Text&amp;#39;, &amp;#39;attributes&amp;#39; =&amp;gt; array( &amp;#39;class&amp;#39; =&amp;gt; &amp;#39;regular-text&amp;#39; // WordPress css class  ) )); </description>
    </item>
    
    <item>
      <title>textarea Field</title>
      <link>https://piklist.github.io/docs/fields/types/textarea/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/fields/types/textarea/</guid>
      <description>&#39;type&#39; =&amp;gt; &#39;textarea&#39; piklist(&#39;field&#39;, array( &#39;type&#39; =&amp;gt; &#39;textarea&#39;, &#39;field&#39; =&amp;gt; &#39;my_textarea&#39;, &#39;label&#39; =&amp;gt; &#39;Text Area&#39;, &#39;attributes&#39; =&amp;gt; array( &#39;rows&#39; =&amp;gt; 10, &#39;cols&#39; =&amp;gt; 50, &#39;class&#39; =&amp;gt; &#39;large-text&#39; ) )); </description>
    </item>
    
    <item>
      <title>time Field</title>
      <link>https://piklist.github.io/docs/fields/types/time/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/fields/types/time/</guid>
      <description>&#39;type&#39; =&amp;gt; &#39;time&#39; This is an HTML5 field
piklist(&amp;#39;field&amp;#39;, array( &amp;#39;type&amp;#39; =&amp;gt; &amp;#39;time&amp;#39;, &amp;#39;field&amp;#39; =&amp;gt; &amp;#39;my_field&amp;#39;, &amp;#39;label&amp;#39; =&amp;gt; &amp;#39;my field&amp;#39;, )); </description>
    </item>
    
    <item>
      <title>Understanding Front End Forms</title>
      <link>https://piklist.github.io/docs/tutorials/forms/understanding-front-end-forms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/tutorials/forms/understanding-front-end-forms/</guid>
      <description>Piklist makes creating Front End forms as easy as creating fields in the WordPress admin. In most cases you can use the same field code you used in the admin, plus you need to define the scope parameter. scope tells Piklist where to save your data. In the admin, this can be auto-detected, but not with front-end forms.
  New to Piklist?    Before you start this tutorial:  Install Piklist like you would any other WordPress plugin.</description>
    </item>
    
    <item>
      <title>url Field</title>
      <link>https://piklist.github.io/docs/fields/types/url/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/fields/types/url/</guid>
      <description>&#39;type&#39; =&amp;gt; &#39;url&#39; This is an HTML5 field
piklist(&amp;#39;field&amp;#39;, array( &amp;#39;type&amp;#39; =&amp;gt; &amp;#39;url&amp;#39;, &amp;#39;field&amp;#39; =&amp;gt; &amp;#39;my_field&amp;#39;, &amp;#39;label&amp;#39; =&amp;gt; &amp;#39;my field&amp;#39;, )); </description>
    </item>
    
    <item>
      <title>Using &#34;Chosen&#34; for select fields</title>
      <link>https://piklist.github.io/docs/tutorials/fields/using-chosen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/tutorials/fields/using-chosen/</guid>
      <description>Description Piklist makes it easy to create select boxes, but sometimes they can become long with tons of options. Using the &amp;ldquo;Chosen&amp;rdquo; jQuery plugin from Harvest can make them more user-friendly.
 First, let&amp;rsquo;s load two files from Chosen. Their javascript and css file. Though the javascript is mandatory, the css is not. You can just borrow from this file if you want.  In your theme&amp;rsquo;s functions.php file, or your main plugin file add this code:</description>
    </item>
    
    <item>
      <title>Using &#34;Select2&#34; for select fields</title>
      <link>https://piklist.github.io/docs/tutorials/fields/using-select2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/tutorials/fields/using-select2/</guid>
      <description>Description Piklist makes it easy to create select boxes, but sometimes they can become long with tons of options. Using the &amp;ldquo;Select2&amp;rdquo; jQuery plugin can make them more user-friendly.
 First, let&amp;rsquo;s load two files from Select2. Their javascript and css file. Though the javascript is mandatory, the css is not. You can just borrow from this file if you want.  In your theme&amp;rsquo;s functions.php file, or your main plugin file add this code:</description>
    </item>
    
    <item>
      <title>week Field</title>
      <link>https://piklist.github.io/docs/fields/types/week/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/fields/types/week/</guid>
      <description>&#39;type&#39; =&amp;gt; &#39;week&#39; This is an HTML5 field
piklist(&amp;#39;field&amp;#39;, array( &amp;#39;type&amp;#39; =&amp;gt; &amp;#39;week&amp;#39;, &amp;#39;field&amp;#39; =&amp;gt; &amp;#39;my_field&amp;#39;, &amp;#39;label&amp;#39; =&amp;gt; &amp;#39;my field&amp;#39;, )); </description>
    </item>
    
    <item>
      <title>Working with Field Relationships</title>
      <link>https://piklist.github.io/docs/tutorials/relationships/working-with-field-relationships/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/docs/tutorials/relationships/working-with-field-relationships/</guid>
      <description>Piklist relationships allow you to relate any object to any object.
In this tutorial we&amp;rsquo;ll use the classic books example, assuming our post types are book and chapter, and a user can be an author. We&amp;rsquo;ll cover the post_has, post_belongs, and relate_query parameters.
First let&amp;rsquo;s add the chapter relate field to the book post type. Since this is a post type we&amp;rsquo;re adding a field to, the file goes in the /parts/meta-boxes/ folder.</description>
    </item>
    
  </channel>
</rss>
